{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Pin from \"../components/Pin\";\nimport Masonry from \"react-native-masonry-layout\";\nimport { useNhostClient } from \"@nhost/react\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport default function HomeScrren() {\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      pins = _useState2[0],\n      setPins = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoadingNext = _useState4[0],\n      setIsLoadingNext = _useState4[1];\n\n  var refs = React.useRef();\n\n  var load = function load() {\n    refs.current.addItems(pins);\n  };\n\n  React.useEffect(function () {\n    if (refs != null && refs.current) {\n      if (pins) {\n        load();\n      }\n    }\n  }, [pins]);\n  React.useEffect(function () {\n    fetchPins();\n  }, []);\n  var nhost = useNhostClient();\n\n  var fetchPins = function _callee() {\n    var url, _await$nhost$graphql$, data, error;\n\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            url = nhost.graphql.getUrl();\n            console.log(url);\n            _context.next = 4;\n            return _regeneratorRuntime.awrap(nhost.graphql.request(\"\\nquery{\\n  pins {\\n    title\\n    id\\n    user_id\\n    image\\n  }\\n}\\n\"));\n\n          case 4:\n            _await$nhost$graphql$ = _context.sent;\n            data = _await$nhost$graphql$.data;\n            error = _await$nhost$graphql$.error;\n\n            if (data) {\n              setPins(data.pins);\n            }\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var refetch = function refetch() {\n    setIsLoadingNext(true);\n  };\n\n  return _jsx(Masonry, {\n    refreshing: isLoadingNext,\n    onRefresh: function onRefresh() {\n      return refetch();\n    },\n    ref: refs,\n    columns: 2,\n    renderItem: function renderItem(item, index) {\n      return _jsx(Pin, {\n        pin: {\n          uri: item.image,\n          title: item.title,\n          id: item.id\n        }\n      }, index);\n    }\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    backgroundColor: \"#ecf0f1\",\n    padding: 5\n  }\n});","map":{"version":3,"names":["React","useState","Pin","Masonry","useNhostClient","HomeScrren","pins","setPins","isLoadingNext","setIsLoadingNext","refs","useRef","load","current","addItems","useEffect","fetchPins","nhost","url","graphql","getUrl","console","log","request","data","error","refetch","item","index","uri","image","title","id","styles","StyleSheet","create","container","flex","justifyContent","backgroundColor","padding"],"sources":["D:/react-native workSpace/vadimProjectNotjustDev/Printerest/PrinterestMyClone/screens/HomeScreen.tsx"],"sourcesContent":["import { AntDesign } from \"@expo/vector-icons\";\nimport React, { useState } from \"react\";\nimport {\n  StyleSheet,\n  Image,\n  View,\n  Text,\n  Dimensions,\n  Pressable,\n  TouchableOpacity,\n  ScrollView,\n} from \"react-native\";\nimport Pin from \"../components/Pin\";\n\nimport Masonry from \"react-native-masonry-layout\";\n\n//import EditScreenInfo from '../components/EditScreenInfo';\n//import { Text} from '../components/Themed';\nimport { RootTabScreenProps } from \"../types\";\n//import pins from \"../assets/pins\";\nimport { Title } from \"react-native-paper\";\n\nimport { useNhostClient } from \"@nhost/react\";\n\nexport default function HomeScrren() {\n  const [pins, setPins] = useState([]);\nconst [isLoadingNext,setIsLoadingNext]  = useState(false)\n\n\n\n  const refs = React.useRef();\n\n  const load = () => {\n    refs.current.addItems(pins);\n  };\n\n  React.useEffect(() => {\n    if (refs?.current) {\n      if (pins) {\n        load();\n      }\n    }\n  }, [pins]);\n\n  React.useEffect(() => {\n    fetchPins();\n  }, []);\n\n  //use the useNHostClient Hook to get the client that we set up in App.tsx we get it with the provider(nhostprovider)\n  const nhost = useNhostClient();\n\n  const fetchPins = async () => {\n    //test to see the backend url\n    const url = nhost.graphql.getUrl();\n    console.log(url);\n\n    //this do not response with data only if we set permissions\n    //you neet to define roles and permissons for those roles\n    //hasura support role-based access controle\n    //you can specify for each role the type of operation that he can do for each table\n    //the client that we have we did not specify his role cause his not authanticated so we can use a public role for making the request\n    const { data, error } = await nhost.graphql.request(`\nquery{\n  pins {\n    title\n    id\n    user_id\n    image\n  }\n}\n`);\n   \n\n    if (data) {\n      setPins(data.pins);\n    }\n  };\n\n  const refetch = ()=>{\n    setIsLoadingNext(true)\n\n  }\n\n\n\n\n\n  return (\n    <Masonry\n      refreshing={isLoadingNext}\n      onRefresh={() => refetch()}\n      ref={refs}\n      /*  style={{ flex: 1, borderWidth: 1, borderColor: 'red' }} */\n      columns={2} // optional - Default: 2\n      renderItem={(item, index) => (\n        <Pin\n          key={index}\n          pin={{ uri: item.image, title: item.title, id: item.id }}\n        />\n      )}\n    />\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    justifyContent: \"center\",\n    /*paddingTop: Constants.statusBarHeight */\n    backgroundColor: \"#ecf0f1\",\n    padding: 5,\n  },\n});\n"],"mappings":";;AACA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;;AAWA,OAAOC,GAAP;AAEA,OAAOC,OAAP,MAAoB,6BAApB;AAQA,SAASC,cAAT,QAA+B,cAA/B;;AAEA,eAAe,SAASC,UAAT,GAAsB;EACnC,gBAAwBJ,QAAQ,CAAC,EAAD,CAAhC;EAAA;EAAA,IAAOK,IAAP;EAAA,IAAaC,OAAb;;EACF,iBAA0CN,QAAQ,CAAC,KAAD,CAAlD;EAAA;EAAA,IAAOO,aAAP;EAAA,IAAqBC,gBAArB;;EAIE,IAAMC,IAAI,GAAGV,KAAK,CAACW,MAAN,EAAb;;EAEA,IAAMC,IAAI,GAAG,SAAPA,IAAO,GAAM;IACjBF,IAAI,CAACG,OAAL,CAAaC,QAAb,CAAsBR,IAAtB;EACD,CAFD;;EAIAN,KAAK,CAACe,SAAN,CAAgB,YAAM;IACpB,IAAIL,IAAJ,YAAIA,IAAI,CAAEG,OAAV,EAAmB;MACjB,IAAIP,IAAJ,EAAU;QACRM,IAAI;MACL;IACF;EACF,CAND,EAMG,CAACN,IAAD,CANH;EAQAN,KAAK,CAACe,SAAN,CAAgB,YAAM;IACpBC,SAAS;EACV,CAFD,EAEG,EAFH;EAKA,IAAMC,KAAK,GAAGb,cAAc,EAA5B;;EAEA,IAAMY,SAAS,GAAG;IAAA;;IAAA;MAAA;QAAA;UAAA;YAEVE,GAFU,GAEJD,KAAK,CAACE,OAAN,CAAcC,MAAd,EAFI;YAGhBC,OAAO,CAACC,GAAR,CAAYJ,GAAZ;YAHgB;YAAA,iCAUcD,KAAK,CAACE,OAAN,CAAcI,OAAd,2EAVd;;UAAA;YAAA;YAURC,IAVQ,yBAURA,IAVQ;YAUFC,KAVE,yBAUFA,KAVE;;YAsBhB,IAAID,IAAJ,EAAU;cACRjB,OAAO,CAACiB,IAAI,CAAClB,IAAN,CAAP;YACD;;UAxBe;UAAA;YAAA;QAAA;MAAA;IAAA;EAAA,CAAlB;;EA2BA,IAAMoB,OAAO,GAAG,SAAVA,OAAU,GAAI;IAClBjB,gBAAgB,CAAC,IAAD,CAAhB;EAED,CAHD;;EASA,OACE,KAAC,OAAD;IACE,UAAU,EAAED,aADd;IAEE,SAAS,EAAE;MAAA,OAAMkB,OAAO,EAAb;IAAA,CAFb;IAGE,GAAG,EAAEhB,IAHP;IAKE,OAAO,EAAE,CALX;IAME,UAAU,EAAE,oBAACiB,IAAD,EAAOC,KAAP;MAAA,OACV,KAAC,GAAD;QAEE,GAAG,EAAE;UAAEC,GAAG,EAAEF,IAAI,CAACG,KAAZ;UAAmBC,KAAK,EAAEJ,IAAI,CAACI,KAA/B;UAAsCC,EAAE,EAAEL,IAAI,CAACK;QAA/C;MAFP,GACOJ,KADP,CADU;IAAA;EANd,EADF;AAeD;AAED,IAAMK,MAAM,GAAGC,UAAU,CAACC,MAAX,CAAkB;EAC/BC,SAAS,EAAE;IACTC,IAAI,EAAE,CADG;IAETC,cAAc,EAAE,QAFP;IAITC,eAAe,EAAE,SAJR;IAKTC,OAAO,EAAE;EALA;AADoB,CAAlB,CAAf"},"metadata":{},"sourceType":"module"}