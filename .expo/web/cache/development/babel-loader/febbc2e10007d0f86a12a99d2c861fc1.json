{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Button from \"react-native-web/dist/exports/Button\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport TextInput from \"react-native-web/dist/exports/TextInput\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useNhostClient } from \"@nhost/react\";\nimport { useNavigation } from \"@react-navigation/native\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function UploadPin() {\n  var _useState = useState(\"\"),\n      _useState2 = _slicedToArray(_useState, 2),\n      image = _useState2[0],\n      setImage = _useState2[1];\n\n  var _useState3 = useState(\"\"),\n      _useState4 = _slicedToArray(_useState3, 2),\n      title = _useState4[0],\n      setTitle = _useState4[1];\n\n  var _useState5 = useState(null),\n      _useState6 = _slicedToArray(_useState5, 2),\n      uploadedFileId = _useState6[0],\n      setUplodedFildId = _useState6[1];\n\n  var navigation = useNavigation();\n  var nhost = useNhostClient();\n  var SET_PIN_MUTATION = \"mutation MyMutation ($image :String! , $title :String){\\n  insert_pins(objects: {image: $image , title : $title}) {\\n    returning {\\n      title\\n      image\\n      id\\n      created_at\\n    }\\n  }\\n \\n}\\n\";\n\n  var pickImage = function _callee() {\n    var result;\n    return _regeneratorRuntime.async(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync({\n              mediaTypes: ImagePicker.MediaTypeOptions.Images,\n              allowsEditing: true,\n              quality: 0.5\n            }));\n\n          case 2:\n            result = _context.sent;\n            console.log(result);\n\n            if (!result.cancelled) {\n              setImage(result.uri);\n            }\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var uri = Platform.OS === \"ios\" ? image.replace(\"file://\", \"\") : image;\n  var uriparts = uri.split(\"/\");\n  var name = uriparts[uriparts.length - 1];\n  var nameAndExtention = name.split(\".\");\n  var extention = nameAndExtention[nameAndExtention.length - 1];\n\n  var uploadImg = function _callee2() {\n    var uploadResponse;\n    return _regeneratorRuntime.async(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(nhost.storage.upload({\n              file: {\n                name: name,\n                type: \"image/\" + extention,\n                uri: uri\n              }\n            }));\n\n          case 2:\n            uploadResponse = _context2.sent;\n            console.log(uploadResponse.fileMetadata);\n\n            if (uploadResponse) {\n              setUplodedFildId(uploadResponse == null ? void 0 : uploadResponse.fileMetadata.id);\n              console.log(uploadResponse == null ? void 0 : uploadResponse.fileMetadata.id);\n            }\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var onSubmit = function _callee3() {\n    var response;\n    return _regeneratorRuntime.async(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            uploadImg();\n            _context3.next = 3;\n            return _regeneratorRuntime.awrap(nhost.graphql.request(SET_PIN_MUTATION, {\n              title: title,\n              image: uploadedFileId\n            }));\n\n          case 3:\n            response = _context3.sent;\n            console.log(response);\n\n            if (response.error) {\n              Alert.alert(\"error uploading\", response.error[0].message);\n            } else {\n              navigation.goBack();\n            }\n\n          case 6:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return _jsxs(View, {\n    style: styles.container,\n    children: [_jsx(Button, {\n      title: \"upload your pin\",\n      onPress: pickImage\n    }), image !== \"\" && _jsxs(_Fragment, {\n      children: [_jsx(Image, {\n        source: {\n          uri: image\n        },\n        style: styles.img\n      }), _jsx(TextInput, {\n        placeholder: \"title ...\",\n        value: title,\n        onChangeText: function onChangeText(val) {\n          return setTitle(val);\n        },\n        style: styles.input\n      }), _jsx(Button, {\n        title: \"submit\",\n        onPress: onSubmit\n      })]\n    })]\n  });\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    padding: 10\n  },\n  img: {\n    width: \"100%\",\n    aspectRatio: 1,\n    marginVertical: 10\n  },\n  input: {\n    padding: 10,\n    marginVertical: 10,\n    width: \"100%\",\n    borderWidth: 1,\n    borderColor: \"gainsboto\",\n    borderRadius: 5\n  }\n});","map":{"version":3,"names":["React","useState","ImagePicker","useNhostClient","useNavigation","UploadPin","image","setImage","title","setTitle","uploadedFileId","setUplodedFildId","navigation","nhost","SET_PIN_MUTATION","pickImage","launchImageLibraryAsync","mediaTypes","MediaTypeOptions","Images","allowsEditing","quality","result","console","log","cancelled","uri","Platform","OS","replace","uriparts","split","name","length","nameAndExtention","extention","uploadImg","storage","upload","file","type","uploadResponse","fileMetadata","id","onSubmit","graphql","request","response","error","Alert","alert","message","goBack","styles","container","img","val","input","StyleSheet","create","flex","alignItems","justifyContent","padding","width","aspectRatio","marginVertical","borderWidth","borderColor","borderRadius"],"sources":["D:/react-native workSpace/vadimProjectNotjustDev/Printerest/PrinterestMyClone/screens/UploadPin.tsx"],"sourcesContent":["import { RootTabScreenProps } from \"../types\";\r\n\r\nimport React, { useState, useEffect } from \"react\";\r\nimport {\r\n  Button,\r\n  Image,\r\n  View,\r\n  Platform,\r\n  StyleSheet,\r\n  TextInput,\r\n  Alert,\r\n} from \"react-native\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport { useNhostClient, useUserDisplayName, useUserId } from \"@nhost/react\";\r\nimport { useNavigation } from \"@react-navigation/native\";\r\n\r\nexport default function UploadPin(/* {\r\n  navigation,\r\n}: RootTabScreenProps<\"UploadPin\"> */) {\r\n  const [image, setImage] = useState(\"\");\r\n  const [title, setTitle] = useState(\"\");\r\n  const [uploadedFileId, setUplodedFildId] = useState<any>(null);\r\n\r\n  const navigation = useNavigation();\r\n\r\n  const nhost = useNhostClient();\r\n\r\n  const SET_PIN_MUTATION = `mutation MyMutation ($image :String! , $title :String){\r\n  insert_pins(objects: {image: $image , title : $title}) {\r\n    returning {\r\n      title\r\n      image\r\n      id\r\n      created_at\r\n    }\r\n  }\r\n \r\n}\r\n`;\r\n\r\n  const pickImage = async () => {\r\n    // No permissions request is necessary for launching the image library\r\n    let result = await ImagePicker.launchImageLibraryAsync({\r\n      mediaTypes: ImagePicker.MediaTypeOptions.Images,\r\n      allowsEditing: true,\r\n      // aspect: [4, 3],\r\n      quality: 0.5,\r\n    });\r\n\r\n    console.log(result);\r\n\r\n    if (!result.cancelled) {\r\n      setImage(result.uri);\r\n      /*  console.log(\"result.uri\", result.uri); */\r\n    }\r\n  };\r\n\r\n  const uri = Platform.OS === \"ios\" ? image.replace(\"file://\", \"\") : image;\r\n\r\n  const uriparts = uri.split(\"/\");\r\n  const name = uriparts[uriparts.length - 1];\r\n  const nameAndExtention = name.split(\".\");\r\n  const extention = nameAndExtention[nameAndExtention.length - 1];\r\n\r\n  const uploadImg = async () => {\r\n    const uploadResponse = await nhost.storage.upload({\r\n      file: {\r\n        name,\r\n        type: `image/${extention}`,\r\n        uri: uri,\r\n      },\r\n    });\r\n    console.log(uploadResponse.fileMetadata);\r\n    if (uploadResponse) {\r\n      setUplodedFildId(uploadResponse?.fileMetadata.id);\r\n      console.log(uploadResponse?.fileMetadata.id);\r\n    }\r\n  };\r\n\r\n  const onSubmit = async () => {\r\n    uploadImg();\r\n    /*  console.log(uploadedFileId);\r\n\r\n    const { presignedUrl, error } = await nhost.storage.getPresignedUrl({\r\n      fileId: uploadedFileId,\r\n    });\r\n\r\n    console.log(presignedUrl, error); */\r\n\r\n    const response = await nhost.graphql.request(SET_PIN_MUTATION, {\r\n      title,\r\n      image: /* presignedUrl?.url */ uploadedFileId,\r\n    });\r\n    console.log(response);\r\n    if (response.error) {\r\n      Alert.alert(\"error uploading\", response.error[0].message);\r\n    } else {\r\n      navigation.goBack();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <View style={styles.container}>\r\n      <Button title=\"upload your pin\" onPress={pickImage} />\r\n      {image !== \"\" && (\r\n        <>\r\n          <Image source={{ uri: image }} style={styles.img} />\r\n          <TextInput\r\n            placeholder=\"title ...\"\r\n            value={title}\r\n            onChangeText={val => setTitle(val)}\r\n            style={styles.input}\r\n          />\r\n          <Button title=\"submit\" onPress={onSubmit} />\r\n        </>\r\n      )}\r\n    </View>\r\n  );\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n  container: {\r\n    flex: 1,\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    padding: 10,\r\n  },\r\n  img: {\r\n    width: \"100%\",\r\n    aspectRatio: 1,\r\n    marginVertical: 10,\r\n  },\r\n  input: {\r\n    padding: 10,\r\n    marginVertical: 10,\r\n    width: \"100%\",\r\n    borderWidth: 1,\r\n    borderColor: \"gainsboto\",\r\n    borderRadius: 5,\r\n  },\r\n});\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}